# Дмитрий Васильевич Григорьевский <gr.dmitriy@gmail.com>, 2022.
# VICTOR <subfyn@gmail.com>, 2023.
# xXx <xxx_xxx_xxxxxxxxx@mail.ru>, 2023.
msgid ""
msgstr ""
"Report-Msgid-Bugs-To: yifeiding@protonmail.com\n"
"PO-Revision-Date: 2023-09-29 19:44+0000\n"
"Last-Translator: xXx <xxx_xxx_xxxxxxxxx@mail.ru>\n"
"Language-Team: Russian <https://hosted.weblate.org/projects/klipper/canbus/ru/>\n"
"Language: ru\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\n"
"X-Generator: Weblate 5.1-dev\n"

msgid "This document describes Klipper's CAN bus support."
msgstr "В этом документе описывается поддержка шины CAN Klipper."

msgid "Device Hardware"
msgstr "Оборудование устройства"

msgid "Host Hardware"
msgstr "Оборудование хоста"

msgid ""
"It is also necessary to configure the host operating system to use the "
"adapter. This is typically done by creating a new file named "
"`/etc/network/interfaces.d/can0` with the following contents:"
msgstr ""
"Также необходимо настроить операционную систему хоста на использование "
"адаптера. Обычно это делается путем создания нового файла "
"`/etc/network/interfaces.d/can0` со следующим содержимым:"

msgid "Terminating Resistors"
msgstr "Согласующие резисторы"

msgid ""
"A CAN bus should have two 120 ohm resistors between the CANH and CANL wires."
" Ideally, one resistor located at each the end of the bus."
msgstr ""
"Шина CAN должна иметь два резистора по 120 Ом между проводами CANH и CANL. В"
" идеале по одному резистору, расположенному на каждом конце шины."

msgid ""
"To test that the resistors are correct, one can remove power to the printer "
"and use a multi-meter to check the resistance between the CANH and CANL "
"wires - it should report ~60 ohms on a correctly wired CAN bus."
msgstr ""
"Чтобы проверить правильность резисторов, можно отключить питание принтера и "
"с помощью мультиметра проверить сопротивление между проводами CANH и CANL ‐ "
"он должен показывать ~60 Ом на правильно подключенной шине CAN."

msgid "Finding the canbus_uuid for new micro-controllers"
msgstr "Поиск canbus_uuid для новых микроконтроллеров"

msgid ""
"Each micro-controller on the CAN bus is assigned a unique id based on the "
"factory chip identifier encoded into each micro-controller. To find each "
"micro-controller device id, make sure the hardware is powered and wired "
"correctly, and then run:"
msgstr ""
"Каждому микроконтроллеру на шине CAN присваивается уникальный идентификатор "
"на основе заводского идентификатора микросхемы, закодированного в каждом "
"микроконтроллере. Чтобы найти идентификатор каждого устройства "
"микроконтроллера, убедитесь, что оборудование подключено правильно и "
"подключено правильно, а затем запустите:"

msgid ""
"If uninitialized CAN devices are detected the above command will report "
"lines like the following:"
msgstr ""
"Если обнаружены неинициализированные устройства CAN, приведенная выше "
"команда выдаст следующие строки:"

msgid ""
"Each device will have a unique identifier. In the above example, "
"`11aa22bb33cc` is the micro-controller's \"canbus_uuid\"."
msgstr ""
"Каждое устройство будет иметь уникальный идентификатор. В приведенном выше "
"примере `11aa22bb33cc` ‐ это «canbus_uuid» микроконтроллера."

msgid ""
"Note that the `canbus_query.py` tool will only report uninitialized devices "
"- if Klipper (or a similar tool) configures the device then it will no "
"longer appear in the list."
msgstr ""
"Обратите внимание, что инструмент `canbus_query.py` сообщает только о "
"неинициализированных устройствах — если Klipper (или аналогичный инструмент)"
" настроит устройство, оно больше не будет отображаться в списке."

msgid "Configuring Klipper"
msgstr "Настройка клиперов"

msgid ""
"Update the Klipper [mcu configuration](Config_Reference.md#mcu) to use the "
"CAN bus to communicate with the device - for example:"
msgstr ""
"Обновите Klipper [конфигурацию mcu](Config_Reference.md#mcu), чтобы "
"использовать шину CAN для связи с устройством, например:"

#, fuzzy
msgid "~/klippy-env/bin/python ~/klipper/scripts/canbus_query.py can0\n"
msgstr "~/klippy-env/bin/python ~/klipper/scripts/canbus_query.py can0\n"

#, fuzzy
msgid ""
"[mcu my_can_mcu]\n"
"canbus_uuid: 11aa22bb33cc\n"
msgstr ""
"[mcu my_can_mcu]\n"
"canbus_uuid: 11aa22bb33cc\n"

#: docs/CANBUS.md:block 1 (header)
#, fuzzy
msgid "CANBUS"
msgstr "CANBUS"

#: docs/CANBUS.md:block 5 (paragraph)
msgid ""
"To compile for CAN, run `make menuconfig` and select \"CAN bus\" as the "
"communication interface. Finally, compile the micro-controller code and "
"flash it to the target board."
msgstr ""
"Чтобы скомпилировать для CAN, запустите `make menuconfig` и выберите «CAN "
"bus» в качестве интерфейса связи. Наконец, скомпилируйте код "
"микроконтроллера и запишите его на целевую плату."

#: docs/CANBUS.md:block 26 (header)
msgid "USB to CAN bus bridge mode"
msgstr "Режим моста USB-CAN"

#: docs/CANBUS.md:block 29 (paragraph)
msgid "Some important notes when using this mode:"
msgstr "Несколько важных замечаний по использованию этого режима:"

#: docs/CANBUS.md:block 30 (unordered list)
msgid ""
"It is necessary to configure the `can0` (or similar) interface in Linux in "
"order to communicate with the bus. However, Linux CAN bus speed and CAN bus "
"bit-timing options are ignored by Klipper. Currently, the CAN bus frequency "
"is specified during \"make menuconfig\" and the bus speed specified in Linux"
" is ignored."
msgstr ""
"Для связи с шиной необходимо настроить интерфейс `can0` (или аналогичный) в "
"Linux. Однако Klipper игнорирует скорость шины CAN Linux и параметры "
"синхронизации битов CAN-шины. В настоящее время частота шины CAN указывается"
" во время «make menuconfig», а скорость шины, указанная в Linux, "
"игнорируется."

#: docs/CANBUS.md:block 20 (code)
msgid "Found canbus_uuid=11aa22bb33cc, Application: Klipper\n"
msgstr "Найден canbus_uuid=11aa22bb33cc, Приложение: Klipper\n"

#: docs/CANBUS.md:block 4 (paragraph)
msgid ""
"Klipper currently supports CAN on stm32, SAME5x, and rp2040 chips. In "
"addition, the micro-controller chip must be on a board that has a CAN "
"transceiver."
msgstr ""

#: docs/CANBUS.md:block 7 (paragraph)
msgid ""
"In order to use a CAN bus, it is necessary to have a host adapter. It is "
"recommended to use a \"USB to CAN adapter\". There are many different USB to"
" CAN adapters available from different manufacturers. When choosing one, we "
"recommend verifying that the firmware can be updated on it. (Unfortunately, "
"we've found some USB adapters run defective firmware and are locked down, so"
" verify before purchasing.) Look for adapters that can run Klipper directly "
"(in its \"USB to CAN bridge mode\") or that run the [candlelight "
"firmware](https://github.com/candle-usb/candleLight_fw)."
msgstr ""

#: docs/CANBUS.md:block 9 (code)
msgid ""
"allow-hotplug can0\n"
"iface can0 can static\n"
"    bitrate 1000000\n"
"    up ifconfig $IFACE txqueuelen 128\n"
msgstr ""

#: docs/CANBUS.md:block 12 (paragraph)
msgid ""
"Note that some devices have a builtin 120 ohm resistor that can not be "
"easily removed. Some devices do not include a resistor at all. Other devices"
" have a mechanism to select the resistor (typically by connecting a \"pin "
"jumper\"). Be sure to check the schematics of all devices on the CAN bus to "
"verify that there are two and only two 120 Ohm resistors on the bus."
msgstr ""

#: docs/CANBUS.md:block 25 (paragraph)
msgid ""
"Some micro-controllers support selecting \"USB to CAN bus bridge\" mode "
"during Klipper's \"make menuconfig\". This mode may allow one to use a "
"micro-controller as both a \"USB to CAN bus adapter\" and as a Klipper node."
msgstr ""

#: docs/CANBUS.md:block 26 (paragraph)
msgid ""
"When Klipper uses this mode the micro-controller appears as a \"USB CAN bus "
"adapter\" under Linux. The \"Klipper bridge mcu\" itself will appear as if "
"it was on this CAN bus - it can be identified via `canbus_query.py` and it "
"must be configured like other CAN bus Klipper nodes."
msgstr ""

#: docs/CANBUS.md:block 28 (unordered list)
msgid ""
"Whenever the \"bridge mcu\" is reset, Linux will disable the corresponding "
"`can0` interface. To ensure proper handling of FIRMWARE_RESTART and RESTART "
"commands, it is recommended to use `allow-hotplug` in the "
"`/etc/network/interfaces.d/can0` file. For example:"
msgstr ""

#: docs/CANBUS.md:block 30 (unordered list)
msgid ""
"The \"bridge mcu\" is not actually on the CAN bus. Messages to and from the "
"bridge mcu will not be seen by other adapters that may be on the CAN bus."
msgstr ""

#: docs/CANBUS.md:block 30 (unordered list)
msgid ""
"The available bandwidth to both the \"bridge mcu\" itself and all devices on"
" the CAN bus is effectively limited by the CAN bus frequency. As a result, "
"it is recommended to use a CAN bus frequency of 1000000 when using \"USB to "
"CAN bus bridge mode\"."
msgstr ""

#: docs/CANBUS.md:block 30 (unordered list)
msgid ""
"Even at a CAN bus frequency of 1000000, there may not be sufficient "
"bandwidth to run a `SHAPER_CALIBRATE` test if both the XY steppers and the "
"accelerometer all communicate via a single \"USB to CAN bus\" interface."
msgstr ""

#: docs/CANBUS.md:block 30 (unordered list)
msgid ""
"A USB to CAN bridge board will not appear as a USB serial device, it will "
"not show up when running `ls /dev/serial/by-id`, and it can not be "
"configured in Klipper's printer.cfg file with a `serial:` parameter. The "
"bridge board appears as a \"USB CAN adapter\" and it is configured in the "
"printer.cfg as a [CAN node](#configuring-klipper)."
msgstr ""

#: docs/CANBUS.md:block 31 (header)
msgid "Tips for troubleshooting"
msgstr ""

#: docs/CANBUS.md:block 32 (paragraph)
msgid "See the [CAN bus troubleshooting](CANBUS_Troubleshooting.md) document."
msgstr ""

#~ msgid ""
#~ "In order to use a CAN bus, it is necessary to have a host adapter. There are"
#~ " currently two common options:"
#~ msgstr ""
#~ "Для того чтобы использовать CAN-шину, необходимо иметь хост-адаптер. В "
#~ "настоящее время существует два распространенных варианта:"

#~ msgid ""
#~ "Use a [Waveshare Raspberry Pi CAN hat](https://www.waveshare.com/rs485-can-"
#~ "hat.htm) or one of its many clones."
#~ msgstr ""
#~ "Используйте [Waveshare Raspberry Pi CAN "
#~ "hat](https://www.waveshare.com/rs485-can-hat.htm ) или один из его "
#~ "многочисленных клонов."

#~ msgid ""
#~ "Note that the \"Raspberry Pi CAN hat\" also requires [changes to "
#~ "config.txt](https://www.waveshare.com/wiki/RS485_CAN_HAT)."
#~ msgstr ""
#~ "Обратите внимание, что \"шапка Raspberry Pi CAN\" также требует [изменений в"
#~ " config.txt](https://www.waveshare.com/wiki/RS485_CAN_HAT)."

#~ msgid ""
#~ "Note that some devices have a builtin 120 ohm resistor (for example, the "
#~ "\"Waveshare Raspberry Pi CAN hat\" has a soldered on resistor that can not "
#~ "be easily removed). Some devices do not include a resistor at all. Other "
#~ "devices have a mechanism to select the resistor (typically by connecting a "
#~ "\"pin jumper\"). Be sure to check the schematics of all devices on the CAN "
#~ "bus to verify that there are two and only two 120 Ohm resistors on the bus."
#~ msgstr ""
#~ "Обратите внимание, что некоторые устройства имеют встроенный резистор "
#~ "сопротивлением 120 Ом (например, «шляпа Waveshare Raspberry Pi CAN» имеет "
#~ "припаянный резистор, который нелегко снять). Некоторые устройства вообще не "
#~ "включают резистор. Другие устройства имеют механизм выбора резистора (обычно"
#~ " путем подключения «штыревой перемычки»). Обязательно проверьте схемы всех "
#~ "устройств на шине CAN, чтобы убедиться, что на шине есть два и только два "
#~ "резистора по 120 Ом."

#~ msgid ""
#~ "auto can0\n"
#~ "iface can0 can static\n"
#~ "    bitrate 500000\n"
#~ "    up ifconfig $IFACE txqueuelen 128\n"
#~ msgstr ""
#~ "авто can0\n"
#~ "iface can0 может статический\n"
#~ "     битрейт 500000\n"
#~ "     вверх ifconfig $IFACE txqueuelen 128\n"

#~ msgid ""
#~ "Use a USB CAN adapter (for example <https://hacker-"
#~ "gadgets.com/product/cantact-usb-can-adapter/>). There are many different USB"
#~ " to CAN adapters available - when choosing one, we recommend verifying it "
#~ "can run the [candlelight firmware](https://github.com/candle-"
#~ "usb/candleLight_fw). (Unfortunately, we've found some USB adapters run "
#~ "defective firmware and are locked down, so verify before purchasing.)"
#~ msgstr ""
#~ "Используйте адаптер USB CAN (например, <https://hacker-"
#~ "gadgets.com/product/cantact-usb-can-adapter/>). Доступно множество различных"
#~ " адаптеров USB CAN. При выборе одного из них мы рекомендуем убедиться, что "
#~ "на нем работает [прошивка candlelight](https://github.com/candle-"
#~ "usb/candleLight_fw). (К сожалению, мы обнаружили, что некоторые USB адаптеры"
#~ " имеют дефектную прошивку и заблокированы, поэтому проверьте их перед "
#~ "покупкой.)"

#~ msgid ""
#~ "Some micro-controllers support selecting \"USB to CAN bus bridge\" mode "
#~ "during \"make menuconfig\". This mode may allow one to use a micro-"
#~ "controller as both a \"USB to CAN bus adapter\" and as a Klipper node."
#~ msgstr ""
#~ "Некоторые микроконтроллеры поддерживают выбор режима «Мост USB-CAN» во время"
#~ " «сделать меню конфигурации». Этот режим может позволить использовать "
#~ "микроконтроллер как в качестве «адаптера USB-CAN», так и в качестве узла "
#~ "Klipper."

#~ msgid ""
#~ "When Klipper uses this mode the micro-controller appears as a \"USB CAN bus "
#~ "adapter\" under Linux. The \"Klipper bridge mcu\" itself will appear as if "
#~ "was on this CAN bus - it can be identified via `canbus_query.py` and "
#~ "configured like other CAN bus Klipper nodes. It will appear alongside other "
#~ "devices that are actually on the CAN bus."
#~ msgstr ""
#~ "Когда Klipper использует этот режим, микроконтроллер отображается как "
#~ "«адаптер шины USB CAN» под Linux. Сам «Klipper Bridge mcu» будет выглядеть "
#~ "так, как если бы он находился на этой CAN-шине — его можно идентифицировать "
#~ "через `canbus_query.py` и настроить так же, как и другие узлы Klipper на "
#~ "CAN-шине. Он появится рядом с другими устройствами, которые фактически "
#~ "подключены к шине CAN."

#~ msgid ""
#~ "The \"bridge mcu\" is not actually on the CAN bus. Messages to and from it "
#~ "do not consume bandwidth on the CAN bus. The mcu can not be seen by other "
#~ "adapters that may be on the CAN bus."
#~ msgstr ""
#~ "«Мостовой микроконтроллер» на самом деле не подключен к шине CAN. Сообщения,"
#~ " поступающие и исходящие от него, не занимают полосу пропускания CAN-шины. "
#~ "Микроконтроллер не виден другим адаптерам, которые могут быть на CAN-шине."

#~ msgid ""
#~ "Whenever the \"bridge mcu\" is reset, Linux will disable the corresponding "
#~ "`can0` interface. To ensure proper handling of FIRMWARE_RESTART and RESTART "
#~ "commands, it is recommended to replace `auto` with `allow-hotplug` in the "
#~ "`/etc/network/interfaces.d/can0` file. For example:"
#~ msgstr ""
#~ "При каждом сбросе «bridge mcu» Linux отключит соответствующий интерфейс "
#~ "`can0`. Чтобы обеспечить правильную обработку команд FIRMWARE_RESTART и "
#~ "RESTART, рекомендуется заменить `auto` на `allow-hotplug` в файле "
#~ "`/etc/network/interfaces.d/can0`. Например:"

#~ msgid ""
#~ "allow-hotplug can0\n"
#~ "iface can0 can static\n"
#~ "    bitrate 500000\n"
#~ "    up ifconfig $IFACE txqueuelen 128\n"
#~ msgstr ""
#~ "разрешить горячее подключение can0\n"
#~ "iface can0 может статический\n"
#~ "     битрейт 500000\n"
#~ "     вверх ifconfig $IFACE txqueuelen 128\n"

#~ msgid ""
#~ "Klipper currently supports CAN on stm32, same5x, and rp2040 chips. In "
#~ "addition, the micro-controller chip must be on a board that has a CAN "
#~ "transceiver."
#~ msgstr ""
#~ "Klipper в настоящее время поддерживает CAN на чипах stm32, Same5x и rp2040. "
#~ "Кроме того, микроконтроллер должен находиться на плате с CAN-трансивером."

#~ msgid ""
#~ "Klipper currently supports CAN on stm32 and rp2040 chips. In addition, the "
#~ "micro-controller chip must be on a board that has a CAN transceiver."
#~ msgstr ""

#~ msgid ""
#~ "Klipper currently only supports CAN on stm32 chips. In addition, the micro-"
#~ "controller chip must support CAN and it must be on a board that has a CAN "
#~ "transceiver."
#~ msgstr ""

#~ msgid "Found canbus_uuid=11aa22bb33cc\n"
#~ msgstr ""

#~ msgid ""
#~ "Whenever the \"bridge mcu\" is reset, Linux will disable the corresponding "
#~ "`can0` interface. Generally, this may require running commands such as \"ip "
#~ "up\" to restart the interface. Thus, Klipper FIRMWARE_RESTART commands (or "
#~ "regular RESTART after a config change) may require restarting the `can0` "
#~ "interface."
#~ msgstr ""

#~ msgid ""
#~ "To compile for CAN, run \"make menuconfig\" and select \"CAN bus\" as the "
#~ "communication interface. Finally, compile the micro-controller code and "
#~ "flash it to the target board."
#~ msgstr ""

#~ msgid ""
#~ "Use a USB CAN adapter (for example [https://hacker-"
#~ "gadgets.com/product/cantact-usb-can-adapter/](https://hacker-"
#~ "gadgets.com/product/cantact-usb-can-adapter/)). There are many different USB"
#~ " to CAN adapters available - when choosing one, we recommend verifying it "
#~ "can run the [candlelight firmware](https://github.com/candle-"
#~ "usb/candleLight_fw). (Unfortunately, we've found some USB adapters run "
#~ "defective firmware and are locked down, so verify before purchasing.)"
#~ msgstr ""
